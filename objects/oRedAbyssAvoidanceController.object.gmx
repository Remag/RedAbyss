<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MusicStartStep = 0;
Step = 0;
RealStep = 0;
Duration = 0;

MusicId = 0;

if( global.debugMode ) {
    if( !instance_exists( oRedDebugInfo ) ) {
        instance_create( 0, 0, oRedDebugInfo );
    }
    Step = oRedDebugInfo.StartStep;
    if( Step &gt; MusicStartStep ) {
        // Start the music.
        MusicId = audio_play_sound( musRedLunarAbyss, 0, false );
        Duration = audio_sound_length( MusicId ) * 50;   
    }
}

// View operation variables.
ViewAngle = 0;

S2TrailFruitMode = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user( 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Intro
var t = Step;
if( t == 8 || t == 73 || t == 94 || t == 160 || t == 182 || t == 247 ) {
    repeat( 2 ) {
        var spawnX = random_range( 64, 800 - 64 );
        var spawnY = 150;
        scrRedCreateCircle( spawnX, spawnY, random( 360 ), 35, oRedS1Bullet );
    }
}
if( t == 269 ) {
    var spawnX = random_range( 64, 800 - 64 );
    var spawnY = 150;
    scrRedCreateCircle( spawnX, spawnY, random( 360 ), 34, oRedS1LCurvedBullet );
    
    spawnX = random_range( 64, 800 - 64 );
    spawnY = 150;
    scrRedCreateCircle( spawnX, spawnY, random( 360 ), 34, oRedS1RCurvedBullet );
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bloom 
if( t == 355 ) {
    scrRedCreateBloomCircle( 400, 150, 3, 2.0, 7, 8, 10 );
} else if( t == 397 ) {
} else if( t == 441 ) {
    scrRedCreateBloomCircle( 400, 150, 4, 2.5, 1, 2, 20 );
} else if( t == 484 ) {
} else if( t == 528 ) {
    scrRedCreateBloomCircle( 400, 150, 5, 3.0, 3, 4, 25 );
} else if( t == 572 ) {
} else if( t == 615 ) {
    scrRedCreateBloomCircle( 400, 150, 6, 3.5, 5, 6, 40 );
} else if( t == 659 ) {
    with( oRedS2Bullet ) {
        MaxSpeed = 100;
        EnableSineMovement = false;
        speed = min( speed, 4 );
        gravity = 0.4;
        friction = 0;
        var divisionX;
        if( abs( scrRedGetPlayerX() - 400 ) &lt; 32 ) {
            divisionX = scrRedGetPlayerX();
        } else {
            divisionX = 400;
        }
        if( x &lt; divisionX ) {
            gravity_direction = 180;   
        } else {
            gravity_direction = 0;
        }
    }
    with( oRedAttachedSpawner ) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jitter

if( t == 702 || t == 790 || t == 886 ) {
    var vlSpawner = instance_create( 200, 0, oRedS3JitterSpawnerBullet );
    vlSpawner.speed = 15;
    vlSpawner.direction = -90;
    vlSpawner.gravity_direction = 90;
    vlSpawner.gravity = 0.4;
    vlSpawner.CurveDir = 1;
    vlSpawner.SpawnImageMin = 1;
    vlSpawner.SpawnImageMax = 3;
    
    var vrSpawner = instance_create( 600, 0, oRedS3JitterSpawnerBullet );
    vrSpawner.speed = 15;
    vrSpawner.direction = -90;
    vrSpawner.gravity_direction = 90;
    vrSpawner.gravity = 0.4;
    vrSpawner.CurveDir = -1;
    vrSpawner.SpawnImageMin = 5;
    vrSpawner.SpawnImageMax = 7;
} else if( t == 1047 || t == 1132 || t == 1221 ) {
    var hlSpawner = instance_create( 0, 200, oRedS3JitterSpawnerBullet );
    hlSpawner.Spawner.SpawnPeriod = 16;
    hlSpawner.speed = 14;
    hlSpawner.direction = 0;
    hlSpawner.gravity_direction = 180;
    hlSpawner.gravity = 0.4;
    hlSpawner.CurveDir = -1;
    hlSpawner.SpawnImageMin = 1;
    hlSpawner.SpawnImageMax = 3;
    
    var hrSpawner = instance_create( 800, 200, oRedS3JitterSpawnerBullet );
    hrSpawner.Spawner.SpawnPeriod = 16;
    hrSpawner.speed = 14;
    hrSpawner.direction = 180;
    hrSpawner.gravity_direction = 0;
    hrSpawner.gravity = 0.4;
    hrSpawner.CurveDir = 1;
    hrSpawner.SpawnImageMin = 5;
    hrSpawner.SpawnImageMax = 7;
    
} else if( t == 965 || t == 1313 ) {
    with( oRedS3JitterBullet ) {
        alarm[0] = -1;
        friction = 0.2;
    }  
} else if( t == 1000 ) {
    with( oRedS3JitterBullet ) {
        direction = point_direction( x, y, 400, 304 ) - 100;
        friction = -0.25;
        TrailCount--;
        PrevPositionsIndex = 0;
    }
} else if( t == 1350 ) {
    with( oRedS3JitterBullet ) {
        direction = point_direction( x, y, 400, 304 ) + 100;
        friction = -0.25;
        TrailCount--;
        PrevPositionsIndex = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sliced Circles
if( t == 1400 ) {
    if( !instance_exists( oRedS5SourceBullet ) ) {
        instance_create( 400, 300, oRedS5SourceBullet );
    }
}

if( t == 1400 || t == 1574 || t == 1749 || t = 1923 ) {
    oRedS5SourceBullet.AngleDelta = -oRedS5SourceBullet.AngleDelta;
    scrRedCreateSlicedCircle( oRedS5SourceBullet.x, oRedS5SourceBullet.y, oRedS5SourceBullet.AngleDelta );
} else if( t == 1465 || t == 1639 || t == 1815 || t == 1990 ) {
    oRedS5SourceBullet.AngleDelta = -oRedS5SourceBullet.AngleDelta;
    scrRedCreateSlicedCircle( oRedS5SourceBullet.x, oRedS5SourceBullet.y, oRedS5SourceBullet.AngleDelta );
} else if( t == 1530 || t == 1705 || t == 1878 ) {
    oRedS5SourceBullet.AngleDelta = -oRedS5SourceBullet.AngleDelta;
    scrRedCreateSlicedCircle( oRedS5SourceBullet.x, oRedS5SourceBullet.y, oRedS5SourceBullet.AngleDelta );
} else if( t == 1447 ) {
    scrRedAttachCustomSpawner( oRedS5SourceBullet.id, 86, oRedS4LeheeSpawner );
}

if( t &gt;= 1447 &amp;&amp; t &lt; 2049 ) {
    var deltaT = ( t - 1447 ) % 172;
    var wallDuration = 24;
    if( deltaT = 0 ) {
        // Right spike wall.
        for( var blockIndex = 0; blockIndex &lt; 18; blockIndex++ ) {
            var spikeY = blockIndex * 32;
            if( blockIndex % 2 == 1 ) {
                scrRedCreateSlidingSpike( 768, spikeY, 180, 1, wallDuration, sprRedAbyssSpikeLeft );
            } else {
                scrRedCreateSlidingSpike( 768, spikeY, 180, 0.5, wallDuration, sprRedAbyssSpikeLeft );
                scrRedCreateSlidingSpike( 768, spikeY + 16, 180, 0.5, wallDuration, sprRedAbyssSpikeLeft );            
            }
        }
        scrRedShakeViewAngle( 3, wallDuration );
    } else if( deltaT == 86 ) {
        // Left spike wall.
        for( var blockIndex = 0; blockIndex &lt; 18; blockIndex++ ) {
            var spikeY = blockIndex * 32;
            if( blockIndex % 2 == 1 ) {
                scrRedCreateSlidingSpike( 0, spikeY, 0, 1, wallDuration, sprRedAbyssSpikeRight );
            } else {
                scrRedCreateSlidingSpike( 16, spikeY, 0, 0.5, wallDuration, sprRedAbyssSpikeRight );
                scrRedCreateSlidingSpike( 16, spikeY + 16, 0, 0.5, wallDuration, sprRedAbyssSpikeRight );            
            }
        }
        scrRedShakeViewAngle( -3, wallDuration );
    }   
}
if( t == 2049 ) {
    var floorDuration = 38;
    // Bottom spike wall.
    for( var blockIndex = 0; blockIndex &lt; 23; blockIndex++ ) {
        var spikeX = 32 + blockIndex * 32;
        if( blockIndex % 2 == 0 ) {
            scrRedCreateSlidingSpike( spikeX, 576, 90, 1, floorDuration, sprRedAbyssSpikeUp );
        } else {
            scrRedCreateSlidingSpike( spikeX, 576, 90, 0.5, floorDuration, sprRedAbyssSpikeUp );
            scrRedCreateSlidingSpike( spikeX + 16, 576, 90, 0.5, floorDuration, sprRedAbyssSpikeUp );            
        }
    }
    scrRedShakeViewY( -32, floorDuration );
} else if( t == 2074 ) {
    scrRedBulletFadeOut( oRedS4CircleBullet );
    scrRedDeactivateBullets( oRedS4CircleBullet );
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Twin downpour

if( t == 2094 ) {
    if( !instance_exists( oRedS5SourceBullet ) ) {
        instance_create( 400, 300, oRedS5SourceBullet );
    }
    with( oRedS5SourceBullet ) {
        scrRedAttachCustomSpawner( id, 43.5, oRedS5BurstBulletSpawner );
        BarrageSpawner = scrRedAttachSpawner( id, 1.5, oRedS5BarrageBullet );
    }
} else if( t == 2100 ) {
    with( oRedS5BurstBulletSpawner ) {
        SpeedMin = 8;
        SpeedMax = 10;
    }
}
if( t &gt;= 2094 &amp;&amp; t &lt;= 2443 ) {
    with( oRedS5SourceBullet ) {
        y = scrRedTweenSine( 300, -200, t - 2094, 2443 - 2094 );
        BarrageSpawner.SpawnPeriod *= 0.996;
    }
}
if( t == 2443 ) {
    var originalBullet = oRedS5SourceBullet.id;
    var newBullet = instance_create( originalBullet.x, originalBullet.y, oRedS5SourceBullet );
    newBullet.AngleDelta = -originalBullet.AngleDelta;
    originalBullet.direction = 180;
    newBullet.direction = 0;
    scrRedAttachCustomSpawner( newBullet, 43.5, oRedS5BurstBulletSpawner );
    newBullet.BarrageSpawner = scrRedAttachSpawner( newBullet, 1.3, oRedS5BarrageBullet );
    newBullet.StartTopX = newBullet.x;
    originalBullet.StartTopX = originalBullet.x;
    originalBullet.BarrageSpawner.SpawnPeriod = 1.3;
    
    with( oRedS5BurstBulletSpawner ) {
        SpawnPeriod /= 2;
        CurrentPeriod = min( SpawnPeriod, CurrentPeriod );
        SpawnCount = 10;
        SpeedMin = 10;
        SpeedMax = 12;
    }
}
if( t == 2616 ) {
    with( oRedS5BurstBulletSpawner ) {
        SpawnPeriod /= 2;
        CurrentPeriod = min( SpawnPeriod, CurrentPeriod );
        SpawnCount = 8;
        SpeedMin = 12;
        SpeedMax = 14;
    }
} else if( t == 2658 ) {
    with( oRedS5BurstBulletSpawner ) {
        SpawnPeriod /= 2;
        CurrentPeriod = min( SpawnPeriod, CurrentPeriod );
        SpawnCount = 6;
        SpeedMin = 14;
        SpeedMax = 16;
    }
}

if( t &gt;= 2443 &amp;&amp; t &lt;= 2702 ) {
    with( oRedS5SourceBullet ) {
        var delta = scrRedTweenSine( 0, 300, t - 2443, 2703 - 2443 );
        x = StartTopX + lengthdir_x( delta, direction );
        AngleDelta += sign( AngleDelta ) * 0.1;
        BaseAlpha += 0.003;
    }
}

if( t == 2702 ) {
    with( oRedS5BarrageBullet ) {
        instance_destroy();
    }
    with( oRedS5BurstBullet ) {
        speed = 0;
    }
    with( oRedS5SourceBullet ) {
        instance_create( x, y, oRedS6AbyssSpawner );
        instance_destroy();
    }
    instance_create( 0, 0, oRedS5TempBackdrop );
}

if( t == 2720 ) {
    scrRedDeactivateBullets( oRedS5BurstBullet );
    with( oRedS5BurstBullet ) {
        var circle = scrRedCreateCircle( x, y, random( 360 ), 3, oRedS5Spike );
        circle.DirDelta = choose( -2, 2 );
        DirDelta = circle.DirDelta;
    }
} else if( t == 2726 ) {
    scrRedBulletFadeOut( oRedS5TempBackdrop );
    with( oRedAbyssBackground ) {
        sprite_index = sprRedAbyssRedBackground;
    }
}
if( t &gt;= 2720 &amp;&amp; t &lt;= 2765 ) {
    with( oRedS5BurstBullet ) {
        image_angle += DirDelta;
    }
}

if( t == 2765 ) {
    scrRedBulletFadeOut( oRedS5BurstBullet );
    with( oRedS5Spike ) {
        DirectionDelta = 0;
        RadiusAccel = 1.5;
    } 
} else if( t == 2766 ) {
    scrRedDeactivateBullets( oRedS5Spike );
    scrRedBulletFadeOut( oRedS5Spike, 0.03 );
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Welcome to Abyss

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Advance &amp; Music Sync

if( Step == MusicStartStep ) {
    // Start the music.
    MusicId = audio_play_sound( musRedLunarAbyss, 0, false );
    Duration = audio_sound_length( MusicId ) * 50;    
} else if( Step &gt; MusicStartStep ) {
    // Stop the music if necessary.
    if( !instance_exists( objPlayer ) || ( Step - MusicStartStep ) &gt;= Duration ) {
        audio_stop_sound( MusicId );
        exit;
    }
    
    // Correct the game time if it desyncs from real time.
    var deltaStep = RealStep - Step;
    if( abs( deltaStep ) &gt; 5 ) {
        // A big lag spike, adjust music to game time.
       audio_sound_set_track_position( MusicId, ( Step - MusicStartStep ) / 50 );
       //show_debug_message( "Music sync" );
       RealStep = Step;
    }
}

Step++;
RealStep += 50 * delta_time / 1000000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
audio_stop_sound( MusicId );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user( 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user( 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.debugMode ) {
    var panelX = 635;
    var panelY = 24;
    var lineHeight = 16;
    
    draw_set_font( fDefault12 );
    draw_set_halign( fa_left );
    draw_set_valign( fa_top );
    scrDrawTextOutline( panelX, panelY, "Frame: " + string( Step ), c_white, c_black );
    var secondsCount = floor( Step / 50 mod 60 );
    var secondsStr;
    if( secondsCount &lt; 10 ) {
        secondsStr = '0' + string( secondsCount );
    } else {
        secondsStr = string( secondsCount );
    }
    scrDrawTextOutline( panelX, panelY + lineHeight, "Time: " + string( floor( Step / 50 / 60 ) ) + ":" + string( secondsStr ), c_white, c_black );
    scrDrawTextOutline( panelX, panelY + 2 * lineHeight, "Count: " + string( instance_count ), c_white, c_black );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
